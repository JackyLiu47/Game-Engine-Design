#ifndef _DetailedSkin_ZOnly_VS_
#define _DetailedSkin_ZOnly_VS_

#define DETAILEDMESH_GLOW_PS
#include "APIAbstraction.gpu"
#include "StandardConstants.fx"
#include "DetailedSkin_Structs.fx"


DETAILED_MESH_PS_IN DetailedSkin_ZOnly_VS(DETAILED_SKIN_VS_IN vIn)
{
    DETAILED_MESH_PS_IN vOut;

	float4 position = make_float4(vIn.iPosL, 1.0);
	float4 normal = make_float4(vIn.iNormal, 0.0);
	float4 tangent = make_float4(vIn.iTangent, 0.0);
	
	float4 result = position;
	float4 normResult = normal;
	float4 tangResult = tangent;


    result = make_float4(0,0,0,0);
    normResult = make_float4(0,0,0,0);
    tangResult = make_float4(0,0,0,0);

	result += vIn.jointWeights.x * mul(position, gJoints[int(vIn.jointIndices.x)]);
	normResult += vIn.jointWeights.x * mul(normal, gJoints[int(vIn.jointIndices.x)]);
	tangResult += vIn.jointWeights.x * mul(tangent, gJoints[int(vIn.jointIndices.x)]);

	if (vIn.jointIndices.y > -0.5){
		result += vIn.jointWeights.y * mul(position, gJoints[int(vIn.jointIndices.y)]);
		normResult += vIn.jointWeights.y * mul(normal, gJoints[int(vIn.jointIndices.y)]);
		tangResult += vIn.jointWeights.y * mul(tangent, gJoints[int(vIn.jointIndices.y)]);
	}

    if (vIn.jointIndices.z > -0.5){
		result += vIn.jointWeights.z * mul(position, gJoints[int(vIn.jointIndices.z)]);
		normResult += vIn.jointWeights.z * mul(normal, gJoints[int(vIn.jointIndices.z)]);
		tangResult += vIn.jointWeights.z * mul(tangent, gJoints[int(vIn.jointIndices.z)]);
	}
	if (vIn.jointIndices.w > -0.5){
		result += vIn.jointWeights.w * mul(position, gJoints[int(vIn.jointIndices.w)]);
		normResult += vIn.jointWeights.w * mul(normal, gJoints[int(vIn.jointIndices.w)]);
		tangResult += vIn.jointWeights.w * mul(tangent, gJoints[int(vIn.jointIndices.w)]);
	}
	#if DEFAULT_SKIN_WEIGHTS_PER_VERTEX == 8
		if (vIn.jointIndices1.x > -0.5){
			result += vIn.jointWeights1.x * mul(position, gJoints[int(vIn.jointIndices1.x)]);
			normResult += vIn.jointWeights1.x * mul(normal, gJoints[int(vIn.jointIndices1.x)]);
			tangResult += vIn.jointWeights1.x * mul(tangent, gJoints[int(vIn.jointIndices1.x)]);
		}
	#endif

	vOut.iPosH = mul(result, gWVP);
	vOut.iPosW =  mul(result, gW).xyz;
	
	normResult = normalize(normResult);
	tangResult = normalize(tangResult);
	vOut.iNormalW =  mul(normResult, gW).xyz;
	vOut.iTangentW = mul(tangResult, gW).xyz;
    vOut.iTangentW = make_float3(0,0,0); // mul(float4(vIn.iTangent, 1.0), gW).xyz; // no need for this line in zonly version

    vOut.iTexCoord.xy = vOut.iPosH.zw; // store z & w so that we can compute depth (z/w) in fragment shader
   return vOut;
	}

VS_wrapper_DETAILED_SKIN(DetailedSkin_ZOnly_VS)

#endif
